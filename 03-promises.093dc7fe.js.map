{"mappings":"oeACA,IAAAA,EAAAC,EAAA,SAMA,MAAMC,EAAO,CACXC,OAAQC,SAASC,cAAc,SAC/BC,MAAOF,SAASC,cAAc,WAsChC,SAASE,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3BC,YAAW,KACaC,KAAKC,SAAW,GAGpCJ,EAAQ,C,SAAEH,E,MAAUC,IAGpBG,EAAO,C,SAAEJ,E,MAAUC,GAAQ,GAE5BA,EAAM,G,CA5CbP,EAAKC,OAAOa,iBAAiB,UAE7B,SAAsBC,GACpBA,EAAMC,iBAEN,MAAMC,EAAW,IAAIC,SAASH,EAAMI,eAC9BC,EAAa,GAEnB,IAAK,MAAOC,EAAKC,KAAUL,EAASM,UAClCH,EAAWC,GAAOG,OAAOF,GAG3B,IAAMf,MAAAkB,EAAKC,KAAEA,EAAIC,OAAEA,GAAWP,EAE9BQ,QAAQC,IAAIJ,GACZG,QAAQC,IAAIH,GACZE,QAAQC,IAAIF,GAEZ,IAAK,IAAIG,EAAI,EAAGA,GAAKH,EAAQG,IAC3BzB,EAAcyB,EAAGL,GACdM,MAAK,EAACzB,SAAEA,EAAQC,MAAEA,MACjBT,EAAAkC,OAAOC,QAAQ,uBAAqB3B,QAAiBC,MAAU,IAEhE2B,OAAM,EAAC5B,SAAEA,EAAQC,MAAEA,MAClBT,EAAAkC,OAAOG,QAAQ,sBAAoB7B,QAAiBC,MAAU,IAGlEkB,GAASC,EAET1B,EAAKC,OAAOmC,O","sources":["src/js/03-promises.js"],"sourcesContent":["// one by one\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\n// import { Report } from 'notiflix/build/notiflix-report-aio';\n// import { Confirm } from 'notiflix/build/notiflix-confirm-aio';\n// import { Loading } from 'notiflix/build/notiflix-loading-aio';\n// import { Block } from 'notiflix/build/notiflix-block-aio';\n\nconst refs = {\n  formEl: document.querySelector('.form'),\n  btnEl: document.querySelector('button'),\n};\n//переменные, которые берутся из HTML-значения:\n// console.log(refs.formEl);\n\nrefs.formEl.addEventListener('submit', onFormSubmit);\n\nfunction onFormSubmit(event) {\n  event.preventDefault();\n\n  const formData = new FormData(event.currentTarget);\n  const dataParams = {};\n\n  for (const [key, value] of formData.entries()) {\n    dataParams[key] = Number(value);\n  }\n\n  let { delay, step, amount } = dataParams;\n\n  console.log(delay);\n  console.log(step);\n  console.log(amount);\n\n  for (let i = 1; i <= amount; i++) {\n    createPromise(i, delay)\n      .then(({ position, delay }) => {\n        Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n\n    delay += step;\n\n    refs.formEl.reset();\n  }\n}\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const shouldResolve = Math.random() > 0.3;\n      if (shouldResolve) {\n        // Fulfill\n        resolve({ position, delay });\n      } else {\n        // Reject\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n// console.log(createPromise);\n\n// makePromise().then(onMakePromiseSuccess).catch(onMakePromiseError);\n\n// function onMakePromiseSuccess(result) {\n//   console.log(`✅ Fulfilled promise pos in ms`);\n//   console.log(result);\n// }\n\n// function onMakePromiseError(error) {\n//   console.log(`❌ Rejected promise  in ms`);\n//   console.log(error);\n// }\n\n// function createPromise(position, delay) {\n//   const shouldResolve = Math.random() > 0.3;\n//   return new Promise((resolve, reject) => {\n//     if (shouldResolve) {\n//       // Fulfill\n//       resolve('Промис выполнился успешно с результатом Fulfilled');\n//     } else {\n//       // Reject\n//       reject('Промис выпонился с ошибкой и был откланен Rejected');\n//     }\n//   });\n// }\n// console.log(createPromise);\n\n// const makePromise = () => {\n//   return new Promise((resolve, reject) => {\n//     let DELAY = 1000;\n\n//     const passed = Math.random() > 0.3;\n\n//     setTimeout(() => {\n//       if (passed) {\n//         resolve(`✅ Fulfilled promise $position in $delayms`);\n//       }\n//       reject(`❌ Rejected promise $position in $delayms`);\n//     }, DELAY);\n//   });\n// };\n\n// makePromise().then(onMakePromiseSuccess).catch(onMakePromiseError);\n\n// function onMakePromiseSuccess(result) {\n//   console.log(`✅ Fulfilled promise pos in ms`);\n//   console.log(result);\n// }\n\n// function onMakePromiseError(error) {\n//   console.log(`❌ Rejected promise  in ms`);\n//   console.log(error);\n// }\n\n// createPromise(2, 1500)\n//   .then(({ position, delay }) => {\n//     console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n//   })\n//   .catch(({ position, delay }) => {\n//     console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n//   });\n\n// const promise = new Promise((resolve, reject) => {\n//   const canFulfill = Math.random() > 0.3;\n//   setTimeout(() => {\n//     if (canFulfill) {\n//       // Fulfill\n//       resolve('Промис выполнился успешно с результатом Fulfilled');\n//     } else {\n//       // Reject\n//       reject('Промис выпонился с ошибкой и был откланен Rejected');\n//     }\n//   }, 2000);\n// });\n// console.log(promise);\n// promise выполнился успешно после 2сек загрузки экрана, т.к. код асинхронный\n// результат выполнения промиса вернется и загрузится после 2 сек, т.к.используем setTimeout\n// promise.then(\n//   //метод .then можно передать 2ве ф-ции  .then(on Success, onError);\n//   //ф-ция возвращает через 2ве сек результат resolve в виде текста\n\n//   result => {\n//     // результат resolve\n//     // console.log(result);\n//     console.log(`${result}`);\n//   },\n//   //ф-ция возвращает через 2ве сек результат reject в виде текста\n//   error => {\n//     // результат reject\n//     // console.log(error);\n//     console.log(`${error}`);\n//   }\n// );\n//цепочки промисов: result - возвращает успешный resolve\n// и результат return 5 передается из 1го then, как промис(успеха) и 2й then возвращает х=5 => 5;\n// и результат return 10 передается из 2го then, как промис(успеха) и 3й then возвращает y=10 => 10;\n// promise\n//   .then (result => {\n//      console.log(result);\n//      return 5;\n// })\n//   .then (x => {\n//      console.log(x);\n//      return 10;\n//   },\n//      error => console.log(error);\n// )\n//   .then (\n//      y => {console.log(y)},\n//      error => {console.log(error)};\n//   )\n// или без error в каждом then, а с .catch вконце:\n// .catch (error => console.log(error))\n// .fanilly(() => console.log('Будет выполнен в любом случае'));\n"],"names":["$iQIUW","parcelRequire","$47d4ff9957288465$var$refs","formEl","document","querySelector","btnEl","$47d4ff9957288465$var$createPromise","position","delay","Promise","resolve","reject","setTimeout","Math","random","addEventListener","event","preventDefault","formData","FormData","currentTarget","dataParams","key","value","entries","Number","delay1","step","amount","console","log","i","then","Notify","success","catch","failure","reset"],"version":3,"file":"03-promises.093dc7fe.js.map"}